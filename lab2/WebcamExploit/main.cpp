#include "CameraManager.h"
#include "CmdParser.h"
#include <iostream>
#include <io.h>
#include <fcntl.h>
#include <Windows.h>
#include "ConsoleUtils.h"

int APIENTRY wWinMain(HINSTANCE, HINSTANCE, LPWSTR, int) {
    int argc;
    LPWSTR* argv = CommandLineToArgvW(GetCommandLineW(), &argc);
    CommandLineParser parser;
    auto opts = parser.parse(argc, argv);   

    try {
        CameraManager cam;

        if (!opts.quiet) {
            AllocConsole();

            FILE* fp;
            freopen_s(&fp, "CONOUT$", "w", stdout);
            freopen_s(&fp, "CONOUT$", "w", stderr);
            freopen_s(&fp, "CONIN$", "r", stdin);

            // wide-режим для wcout/wcerr
            _setmode(_fileno(stdout), _O_U16TEXT);
            _setmode(_fileno(stderr), _O_U16TEXT);

            // кодовая страница UTF-8 для совместимости
            SetConsoleOutputCP(CP_UTF8);
            SetConsoleCP(CP_UTF8);

            std::ios::sync_with_stdio(false);
        }

        if (opts.info) {
            cam.printInfo(opts.quiet);
        }
        else if (opts.snap) {
            if (opts.outputPath.empty()) {
                throw std::wstring(L"Не указан путь для сохранения (--output)");
            }
            cam.snap(opts.outputPath, opts.quiet);
        }
        else if (opts.capture) {
            if (opts.outputPath.empty()) {
                throw std::wstring(L"Не указан путь для сохранения (--output)");
            }
            cam.capture(opts.captureSeconds, opts.outputPath, opts.quiet);
        }
        else {
            if (!opts.quiet) {
                std::wcout << L"Использование: --info | --snap --output path | --capture N --output path [--quiet]\n";
            }
        }
    }
    catch (const std::wstring& msg) {
        wprintErr(msg);
        return 1;
    }
    catch (const std::exception& ex) {
        // конвертируем what() в wide
        int size = MultiByteToWideChar(CP_UTF8, 0, ex.what(), -1, nullptr, 0);
        std::wstring wmsg(size - 1, L'\0');
        MultiByteToWideChar(CP_UTF8, 0, ex.what(), -1, &wmsg[0], size);
        std::wcerr << L"Ошибка (std::exception): " << wmsg << std::endl;
        return 1;
    }

    return 0;
}

