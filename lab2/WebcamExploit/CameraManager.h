#pragma once
#include <string>
#include <mfapi.h>
#include <mfobjects.h>
#include <mfidl.h>
#include <mfreadwrite.h>
#include <mferror.h>
#include <iostream>
#include <chrono>
#include <thread>
#include <corecrt_wstring.h>
#include <stdexcept>
#include <dshow.h>
#include <vector>
#include "ConsoleUtils.h"
#include <wincodec.h>

#pragma comment(lib, "windowscodecs.lib")
#pragma comment(lib, "mfplat.lib")
#pragma comment(lib, "mf.lib")
#pragma comment(lib, "mfreadwrite.lib")
#pragma comment(lib, "mfuuid.lib")
#pragma comment(lib, "Strmiids.lib")

class CameraManager {
public:
    CameraManager();
    ~CameraManager();

    void printInfo(bool quiet);
    void snap(const std::wstring& outputPath, bool quiet);
    void capture(int seconds, const std::wstring& outputPath, bool quiet);

private:
    void initMediaFoundation();
    void shutdownMediaFoundation();
    IMFActivate* getFirstCamera();
    void configureSourceReader(IMFSourceReader* pReader);
    void captureAndSaveFrame(IMFSourceReader* pReader, const std::wstring& outputPath);
    void saveSampleToImage(IMFSample* pSample, const std::wstring& outputPath, UINT32 width, UINT32 height, const GUID& videoFormat, LONG stride);
    void getCurrentMediaTypeInfo(IMFSourceReader* pReader, UINT32& width, UINT32& height, GUID& videoFormat);
};